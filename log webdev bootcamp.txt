sublime text editor + chrome
in chrome page code
side view Ctrl + Shift + i
or
full view  Ctrl + u

mdn - Mozilla Developer Network - very good resource for
everything around HTML, CSS, JavaScript
just type for example
mdn functions - to get answers on js functions

sublime editor hotkeys
ctrl+n = new file
ctrl+s = save file
ctrl+/ = comment line
alt+. = close tag
ctrl+d = select word under cursor, 
second! ctrl+d = add next instance of this word to selection 
so you can edit word in multiple lines
alt+f3 = select all instances of word under cursor

ctrl+shift+d = clone of line under cursor
ctrl+lMouse = second cursor

alt+shift+w = put &lt;p&gt; tag around selected
to put different tag - after alt+shift+w - write needed tag
to put needed tag on multiple lines 
select lines
ctrl+shift+l for multy line editing
alt+shift+w for p tag on all lines
write own tag - to overrite p tag on all edited lines

alt+shift+f = autoformat selected, so alt+a befor to select all
write html -> press tab = html sceleton to the file
alt+shift+1(2)(3) to manage sublime windows quantity

for autoformat shortcut
preferences -> keybindings -> add to user window - { "keys": ["shift+alt+f"], "command": "reindent"}
You can also add this command to userKeyBindings:

{"keys": ["your key bind.."], "command": "rename_tag"} // like super+shift+k
to install plugin - preferences ->packege control -> put plugin there
(C:\Users\user_name\AppData\Roaming\Sublime Text 3\Packages)


###############################################################################################
###############################################################################################


mdm elements reference - to look at all html elements description
<div>div</div> - container helping group content together, block element
<span>span</span> - container to, but inline element
<strong>strong</strong>(old<b></b>) - for strong letters
<em>emphasise</em>(old<i></i>) - for italic


###############################################################################################
###############################################################################################


lists
ordered list
<ol>
<li>item</li> list item
</ol>

unordered list
<ul>
<li>item</li> list item
</ul>

description list
<dl>
<dt>Mozila</dt> - groups of terms
<dt>Firefox</dt> - groups of terms
<dd> - descriptions
A free, open source, cross-platform,
graphical web browser.</dd>
</dl>

list-style-type: disc, circle, square, decimal, cjk-decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-alpha,
lower-latin, upper-alpha, upper-latin etc
Sets the type of bullets to use for the list, for example square or circle bullets for an unordered list, 
or numbers, letters or roman numerals for an ordered list.
list-style-position: inside, outside
Sets whether the bullets appear inside the list items, or outside them before the start of each item.
list-style-image: url(), none
Allows you to use a custom image for the bullet, rather than a simple square or circle.


###############################################################################################
###############################################################################################


by default in links used file protocol, to use local resources,
and to point link to outside add "http://" at the begining of href
<div class="inside" style="float:right">
	<a href="https://www.google.com/search?q=corgi&newwindow=1&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiSocynr-XaAhWBBSwKHR9_BvkQ_AUICigB&biw=1918&bih=989"
	title="corgi" target="_blank">
	<img src="http://i.imgur.com/Zl0A6erm.jpg" title="Rusty">
	</a>
</div>

tables
html5 -> <thead> and <tbody> doing nothing just pointing reader the head and the body of the table
<table border="1">
	<thead>
	<tr>
		<th>Name</th>
		th>Age</th>
	/tr>
	</thead>

	<tbody>
	<tr>
		<td>Rusty</td>
		<td>2</td>
	</tr>
	<tr>
		<td>Wyatt</td>
		<td>13</td>
	</tr>
	</tbody>
</table>

<colgroup>
    <col span="2" style="background-color:red">
    <col style="background-color:yellow">
  </colgroup>
Most browsers will display the <colgroup> element with the following default values:

colgroup { 
    display: table-column-group;
}

The <colgroup> tag specifies a group of one or more columns in a table for formatting.

The <colgroup> tag is useful for applying styles to entire columns, instead of repeating 
the styles for each cell, for each row.

Note: The <colgroup> tag must be a child of a <table> element, after any <caption> elements 
and before any <thead>, <tbody>, <tfoot>, and <tr> elements.

Tip: To define different properties to a column within a <colgroup>, use the <col> tag within 
the <colgroup> tag.
The <col> tag specifies column properties for each column one by one <col> within a <colgroup> element.

The <col> tag is useful for applying styles to entire columns, instead of repeating 
the styles for each cell, for each row.
<table>
  <colgroup>
    <col span="2" style="background-color:red">
    <col style="background-color:yellow">
  </colgroup>
  <tr>
    <th>ISBN</th>
    <th>Title</th>
    <th>Price</th>
  </tr>
  <tr>
    <td>3476896</td>
    <td>My first HTML</td>
    <td>$53</td>
  </tr>
</table>


<caption>Example Caption</caption>

You can give your table a caption by putting it inside a <caption> element and nesting that inside 
the <table> element. You should put it just below the opening <table> tag.

By supplying a caption element whose value clearly and concisely describes the table's purpose, it helps
 the people decide if they need to read the rest of the table content or skip over it.
This helps people navigating with the aid of assistive technology such as a screen reader, 
people experiencing low vision conditions, and people with cognitive concerns.

As your tables get a bit more complex in structure, it is useful to give them more structural 
definition. One clear way to do this is by using <thead>, <tfoot>, and <tbody>, which allow you 
to mark up a header, footer, and body section for the table.


###############################################################################################
###############################################################################################


<form></form> - shell container around inputs to submit them together
<form action="/my-form-submiting-page" method="post">
<!-- All input fields -->
</form>

action - specified where to send a data
method specifies type of http request(GET, POST)
GET - when we doing some like searching or retriving data(adds data in readable form to url request)
example - file:///C:/JS/jsboot/firstPage/forms.html?login=john1&email=john%40dot.com&password=123
after actual url "?" added - followed by input "name" + "=" + "value", inputs separated by "&"
POST - when we doing some request to database like sending data


<label></label>
to add input name on screen you can just type it before input tag
Login:<input type="text" name="login>

but better to wrap text name togheter with input in <label> tag to give programms idea that this actual text is
related to this actual input field
<label>Login:<input type="text" name="login></label>

or can be alternative syntax of using label
"for" attribute direct label tag to element by its name or id
<p><label>Login:<input type="text" name="login" placeholder="login" required></label></p>
or					
<p><label for="email">Email:</label><input type="email" name="email" placeholder="email" required></p>	
label will put his text before specified element but if you want text to be inside same <p> tag - put <label> inside <p>


-> mdn input
<input> default type="text"
<input type="password">
<input type="email">
<input type="date"> - date 
<input type="datetime"> - time by timezone
<input type="datetime-local"> - local time, time without timezone
<input type="file"> - selecting file
<input type="image"> - selecting image

<input type="radio"> - radio button, value attribute - to point app what to send if on, 
if name shared between radiobuttons - they connected and only one can be choosen
<p>
<label>Male:<input type="radio" id="male" name="sex" value="male"></label>
<label>Female:<input type="radio" id="female" name="sex" value="female"></label>
</p>

<input type="checkbox"> - checkbox button, default value unchecked, "required" attribute for mandatory check to submit

<input type="color"> - color picker
<input type="range"> - range picker, default min="0" max="100"
<input type="hidden"> - not displayed but submited to server

dropdown menu - name attribut in select to add value to sended data, value in option - to switch value from text in option to needed on demand

<select name="colorMenu">
	<option>Red</option>
	<option value="black">Black</option>
	<option value="white">White</option>
</select>
attributes
form - shows to which form related if placed not inside actual form
size - how much lines viewed together
multiple = multiple choise
selected - which element shown selected at start
name,required,disabled,autofocus


<textarea rows="10" cols="20"></textarea> - text area for multiline input needs


###############################################################################################
###############################################################################################


forms validation with html attributes

minlength
maxlength

required - forces input to be mandatory - defaul true

type="email" - forces form to validate that field has text part followed by @ followed by text part
text+@+text - without ?! etc symbols unacceptable in email addresses

pattern - matches input characters with regular expression
examples to give you a basic idea of how they work:

a — matches one character that is a (not b, not aa, etc.)
abc — matches a, followed by b, followed by c.
a* — matches the character a, zero or more times (+ matches a character one or more times).
[^a] — matches one character that is not a.
a|b — matches one character that is a or b.
[abc] — matches one character that is a, b, or c.
[^abc] — matches one character that is not a, b, or c.
[a-z] — matches any character in the range a–z, lower case only (you can use [A-Za-z] for lower and upper case, and [A-Z] for upper case only).
a.c — matches a, followed by any character, followed by c.
a{5} — matches a, 5 times.
a{5,7} — matches a, 5 to 7 times, but no less or more.
You can use numbers and other characters in these expressions too, such as:

[ -] — matches a space or a dash.
[0-9] — matches any digit in the range 0 to 9.
You can combine these in pretty much any way you want, specifying different parts one after the other:

[Ll].*k — A single character that is an upper or lowercase L, followed by zero or more characters of any type, followed by a single lowercase k.
[A-Z][A-Za-z' -]+ — A single upper case character followed by one or more characters that are an upper or lower case letter, a dash, an apostrophe, 
or a space. This could be used to validate the city/town names of English-speaking countries, which need to start with a capital letter, 
but don't contain any other characters. Examples from the UK include Manchester, Ashton-under-lyne, and Bishop's Stortford.
[0-9]{3}[ -][0-9]{3}[ -][0-9]{4} — A simple match for a US domestic phone number — three digits, followed by a space or a dash, 
followed by three digits, followed by a space or a dash, followed by four digits. You might have to make this more complex, 
as some people write their area code in parentheses, but it works for a simple demonstration.

<form>
  <input name="oneTwoNumbers" required pattern="[0-9]|[0-9][0-9]">
  <button>Submit</button>
</form>


###############################################################################################
###############################################################################################


CSS - Cascade Style Sheet
http://www.csszengarden.com/
https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048

background:
body{
background: url();
background-repeat: no-repeat;
background-size:cover;
}

###############################################################################################

text-decoration:
formal syntax = text-decoration-line || text-decoration-style || text-decoration-color

examples
.under {
  text-decoration: underline red;
}
.over {
  text-decoration: wavy overline lime;
}
.line {
  text-decoration: line-through;
}
.plain {
  text-decoration: none;
}
.underover {
  text-decoration: dashed underline overline;
}
.blink {
  text-decoration: blink;
}

###############################################################################################

text-align: start | end | left | right | center | justify | match-parent

CSS property describes how inline content like text is aligned in its parent block element. 
text-align does not control the alignment of block elements, only their inline content.


###############################################################################################
###############################################################################################


Selectors
Descendant - one selector inside another

li a{
color:red;
}

Adjacent - one selector after another

h4 + ul{
border: 1px solid red;
}

Attribute - selector with attribute

a[href="http://www.google.com"]{
background: green;
}

*nth of type - every *nth selector of type

ul:nth-of-type(3){
color:green;
}


###############################################################################################
###############################################################################################


pseudoclasses - used to act when element is in scecific state
pseudoelements - used to work with certain area of element

pseudoclasses 
:active :any :any-link :checked :default :defined 
:dir() :disabled :empty :enabled
:first :first-child :first-of-type :fullscreen 
:focus :hover :indeterminate :in-range
:invalid :lang() :last-child :last-of-type :left 
:link :not() :nth-child() :nth-last-child()
:nth-last-of-type() :nth-of-type() :only-child 
:only-of-type :optional :out-of-range
:read-only :read-write :required :right :root 
:scope :target :valid :visited

:hover - changin element on mouse over it
h1:hover {
	color: blue;
}

:visited - changing visited anchors(links) <a> 
a:visited {
	color:gray;
}


pseudoelements

::after
::before
::cue
::first-letter
::first-line
::selection

The content CSS property is used with the ::before and ::after pseudo-elements to generate content in an element. 
Objects inserted using the content property are anonymous replaced elements.

add pluss after links
a::after {
  content: "+";
}

add plus before links
a::before {
  content: "+";
}

style first letter of element
p::first-letter {
  font-size: 130%;
}

style first line of element
p::first-line {
  color: red;
}

::selection CSS pseudo-element applies styles to the portion of a document that has been highlighted 
by the user (such as with the mouse).

::selection {
  background: cyan;
}


###############################################################################################
###############################################################################################


Fonts
https://fonts.google.com - fonts here
https://www.cssfontstack.com/ - a complete collection of web safe CSS font stacks
https://baconipsum.com - backon ipsum

add font
<link href="https://fonts.googleapis.com/css?family=Indie+Flower" rel="stylesheet">
font-family: 'Indie Flower', cursive; <- font after coma is alternative(if main font failed to load)

/* <length> values */
font-size: 12px; - real value

font-size: 0.8em; - relative value 
Another way of setting the font size is with em values. The size of an em value is dynamic. 
When defining the font-size property, an em is equal to the size of the font that applies 
to the parent of the element in question. If you haven't set the font size anywhere on the page, 
then it is the browser default, which is often 16px. So, by default 1em = 16px, and 2em = 32px. 
If you set a font-size of 20px on the body element, then 1em = 20px and 2em = 40px. 
Note that the value 2 is essentially a multiplier of the current em size.
Note2 - em - takes closest parent size as point, so if body 10px, p inside 1.6em will be 16px, 
span inside the p 1.6em - will be 25.6px

relative size values depends on parent elements size taken as 1, 100% or medium
/* <absolute-size> values */
font-size: xx-small;
font-size: x-small;
font-size: small;
font-size: medium;
font-size: large;
font-size: x-large;
font-size: xx-large;

/* <relative-size> values */
font-size: smaller;
font-size: larger;

/* <percentage> values */
font-size: 80%;

/* Global values */
font-size: inherit;
font-size: initial;
font-size: unset;

###############################################################################################

font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit
bold is equivalent to 700
normal is equivalent to  400
Many fonts only have 400 and 700 weights available. Available weights may vary font-to-font.

###############################################################################################

letter-spacing: 0.2rem;
line-height: normal | 2.5 | 3em | 150% | 32px

Prefer unitless numbers for line-height values
CSS property sets the amount of space used for lines, such as in text. On block-level elements, 
it specifies the minimum height of line boxes within the element. On non-replaced inline elements, 
it specifies the height that is used to calculate line box height.

###############################################################################################

font-style: normal | italic | oblique

###############################################################################################

font-variant - CSS property is a shorthand for the longhand properties font-variant-caps, font-variant-numeric, 
font-variant-alternates, font-variant-ligatures, and font-variant-east-asian

font-variant: normal | none | [ <common-lig-values> || <discretionary-lig-values> || 
<historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || 
historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) 
|| swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || 
annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps 
| unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || 
<numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || 
<east-asian-width-values> || ruby ]
where 
<common-lig-values> = [ common-ligatures | no-common-ligatures ]
<discretionary-lig-values> = [ discretionary-ligatures | no-discretionary-ligatures ]
<historical-lig-values> = [ historical-ligatures | no-historical-ligatures ]
<contextual-alt-values> = [ contextual | no-contextual ]
<feature-value-name> = <custom-ident>
<numeric-figure-values> = [ lining-nums | oldstyle-nums ]
<numeric-spacing-values> = [ proportional-nums | tabular-nums ]
<numeric-fraction-values> = [ diagonal-fractions | stacked-fractions ]
<east-asian-variant-values> = [ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]
<east-asian-width-values> = [ full-width | proportional-width ]

CSS property is a shorthand for the longhand properties font-variant-caps, font-variant-numeric, 
font-variant-alternates, font-variant-ligatures, and font-variant-east-asian


###############################################################################################
###############################################################################################


div -> float related problem - div doesnt inherit floated elements size

Depending upon the design being produced, each of the below clearfix CSS solutions has its own benefits.

The clearfix does have useful applications but it has also been used as a hack. Before you use a clearfix 
perhaps these modern css solutions can be useful:

css flexbox
css grid
Modern Clearfix Solutions
Container with overflow: auto;
The simplest way to clear floated elements is using the style overflow: auto on the containing element. 
This solution works in every modern browsers.

<div style="overflow: auto;">
  <img
    style="float: right;"
    src="path/to/floated-element.png"
    width="500"
    height="500"
  > 
  <p>Your content here…</p>
</div>
One downside, using certain combinations of margin and padding on the external element can cause scrollbars 
to appear but this can be solved by placing the margin and padding on another parent containing element.

Using ‘overflow: hidden’ is also a clearfix solution, but will not have scrollbars, however using hidden 
will crop any content positioned outside of the containing element.

Note: The floated element is an img tag in this example, but could be any html element.

Clearfix Reloaded
Thierry Koblentz on CSSMojo wrote: The very latest clearfix reloaded. He noted that by dropping support 
for oldIE, the solution can be simplified to one css statement. Additionally, using display: block (instead of 
display: table) allows margins to collapse properly when elements with clearfix are siblings.

.container::after {
  content: "";
  display: block;
  clear: both;
}
This is the most modern version of the clearfix.

Older Clearfix Solutions
The below solutions are not necessary for modern browsers, but may be useful for targeting older browsers.

Note that these solutions rely upon browser bugs and therefore should be used only if none of the above solutions 
work for you.

They are listed roughly in chronological order.

"Beat That ClearFix", a clearfix for modern browsers
Thierry Koblentz' of CSS Mojo has pointed out that when targeting modern browsers, we can now drop the zoom 
and ::before property/values and simply use:

.container::after {
    content: "";
    display: table;
    clear: both;
}
This solution does not support for IE 6/7 …on purpose!

Thierry also offers: "A word of caution: if you start a new project from scratch, go for it, but don’t 
swap this technique with the one you have now, because even though you do not support oldIE, your existing rules 
prevent collapsing margins."

Micro Clearfix
The most recent and globally adopted clearfix solution, the Micro Clearfix by Nicolas Gallagher.

Known support: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+

.container::before, .container::after {
  content: "";
  display: table;
}
.container::after {
  clear: both;
}
.container {
  zoom: 1;
}
Overflow Property
This basic method is preferred for the usual case, when positioned content will not show outside the bounds of the container.

http://www.quirksmode.org/css/clearing.html - explains how to resolve common issues related to this technique, namely, 
setting width: 100% on the container.

.container {
  overflow: hidden;
  display: inline-block;
  display: block;
}
Rather than using the display property to set "hasLayout" for IE, other properties can be used for triggering 
"hasLayout" for an element.

.container {
  overflow: hidden;
  zoom: 1;
  display: block;
}
Another way to clear floats using the overflow property is to use the underscore hack. IE will apply the values prefixed 
with the underscore, other browsers will not. The zoom property triggers hasLayout in IE:

.container {
  overflow: hidden;
  _overflow: visible; /* for IE */
  _zoom: 1; /* for IE */
}
While this works... it is not ideal to use hacks.

PIE: Easy Clearing Method
This older "Easy Clearing" method has the advantage of allowing positioned elements to hang outside the bounds of the 
container, at the expense of more tricky CSS.

This solution is quite old, but you can learn all about Easy Clearing on Position Is Everything: 
http://www.positioniseverything.net/easyclearing.html

Element using "clear" property
The quick and dirty solution (with some drawbacks) for when you’re quickly slapping something together:

<br style="clear: both" /> <!-- So dirty! -->
Drawbacks
It's not responsive and thus may not provide the desired effect if layout styles change based upon media queries. 
A solution in pure CSS is more ideal.
It adds html markup without necessarily adding any semantic value.
It requires a inline definition and solution for each instance rather than a class reference to a single solution 
of a “clearfix” in the css and class references to it in the html.
It makes code difficult to work with for others as they may have to write more hacks to work around it.
In the future when you need/want to use another clearfix solution, you won't have to go back and remove 
every <br style="clear: both" /> tag littered around the markup.


###############################################################################################
###############################################################################################


Bootstrap
Getting bootstrap
http://getbootstrap.com/getting-started/
http://v4-alpha.getbootstrap.com/getting-started/introduction/

Examples
http://getbootstrap.com/getting-started/#examples
http://getbootstrap.com/examples/theme/
https://getbootstrap.com/docs/3.3/examples/theme/

Best Web resources for Bootstrap
http://www.bootply.com/
http://www.layoutit.com/
https://www.boottheme.com/
https://bootswatch.com/
http://www.plugolabs.com/twitter-bootstrap-button-generator/
http://bootsnipp.com/buttons

Bootstrap Starter Template with CDN
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags always come first -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" 
integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- jQuery first, then Bootstrap JS. -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js" 
integrity="sha384-vZ2WRJMwsjRMW/8U7i6PWi6AlO1L79snBrmgiDpgIWJ82z8eA5lenwvxbMV1PAh7" crossorigin="anonymous"></script>
  </body>
</html>

###############################################################################################

container - Containers are the most basic layout element in Bootstrap and are required when using our default grid 
system. Choose from a responsive, fixed-width container (meaning its max-width changes at each breakpoint) or fluid-width 
(meaning it’s 100% wide all the time).

jumbotron - bootstrap container - taking 100% of parent size, a lightweight, flexible component that can optionally 
extend the entire viewport to showcase key marketing messages on your site.

###############################################################################################

forms
form-group - .form-group class is the easiest way to add some structure to forms. It provides a flexible class 
that encourages proper grouping of labels, controls, optional help text, and form validation messaging.  

form-control - Textual form controls—like <input>s, <select>s, and <textarea>s—are styled with it. Included are styles 
for general appearance, focus state, sizing, and more.

<div class="form-group">
	<label for="exampleInputPassword1">Password</label>
	<input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
</div>

Inline forms
Use the .form-inline class to display a series of labels, form controls, and buttons on a single horizontal row. 
Form controls within inline forms vary slightly from their default states.

###############################################################################################

!!!to make hamburger button working - first add jQuery only than js script

navbar
Navbars require a wrapping .navbar with .navbar-expand{-sm|-md|-lg|-xl} for responsive collapsing and color scheme classes.
Navbars and their contents are fluid by default. Use optional containers to limit their horizontal width.
Use our spacing and flex utility classes for controlling spacing and alignment within navbars.
Navbars are responsive by default, but you can easily modify them to change that. Responsive behavior depends on our 
Collapse JavaScript plugin.
Navbars are hidden by default when printing. Force them to be printed by adding .d-print to the .navbar. See the display 
utility class.
Ensure accessibility by using a <nav> element or, if using a more generic element such as a <div>, add a role="navigation" 
to every navbar to explicitly identify it as a landmark region for users of assistive technologies.

Navbars come with built-in support for a handful of sub-components. Choose from the following as needed:

.navbar-brand - can be applied to most elements, but an anchor works best as some elements might require utility classes 
or custom styles. for your company, product, or project name.

.navbar-nav - Navbar navigation links build on our .nav options with their own modifier class and require the use of toggler 
classes for proper responsive styling. Navigation in navbars will also grow to occupy as much horizontal space as possible to 
keep your navbar contents securely aligned. Active states—with .active—to indicate the current page can be applied directly 
to .nav-links or their immediate parent .nav-items. for a full-height and lightweight navigation (including support for dropdowns).

.navbar-toggler - for use with our collapse plugin and other navigation toggling behaviors.

.form-inline - for any form controls and actions.

.navbar-text - for adding vertically centered strings of text.

.collapse.navbar-collapse - for grouping and hiding navbar contents by a parent breakpoint.


Color schemes
Theming the navbar has never been easier thanks to the combination of theming classes and background-color utilities. Choose from 
.navbar-light for use with light background colors, or .navbar-dark for dark background colors. Then, customize with .bg-* utilities.


it’s not required, you can wrap a navbar in a .container to center it on a page or add one within to only center the contents 
of a fixed or static top navbar.


Placement
Use our position utilities to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied 
to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use position: fixed, meaning they’re 
pulled from the normal flow of the DOM and may require custom CSS (e.g., padding-top on the <body>) to prevent overlap with other 
elements.
Also note that .sticky-top uses position: sticky, which isn’t fully supported in every browser.


Responsive behaviors
Navbars can utilize .navbar-toggler, .navbar-collapse, and .navbar-expand{-sm|-md|-lg|-xl} classes to change when their content
 collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.

For navbars that never collapse, add the .navbar-expand class on the navbar. For navbars that always collapse, don’t add any 
.navbar-expand class.

Toggler
Navbar togglers are left-aligned by default, but should they follow a sibling element like a .navbar-brand, they’ll automatically 
be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.
With no .navbar-brand shown in lowest breakpoint:

###############################################################################################






























###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################

































###############################################################################################
