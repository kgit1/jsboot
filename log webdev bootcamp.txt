sublime text editor + chrome
in chrome page code
side view Ctrl + Shift + i
or
full view  Ctrl + u

mdn - Mozilla Developer Network - very good resource for
everything around HTML, CSS, JavaScript
just type for example
mdn functions - to get answers on js functions

sublime editor hotkeys
ctrl+n = new file
ctrl+s = save file
ctrl+/ = comment line
alt+. = close tag
ctrl+d = select word under cursor, 
second! ctrl+d = add next instance of this word to selection 
so you can edit word in multiple lines
alt+f3 = select all instances of word under cursor

ctrl+shift+d = clone of line under cursor
ctrl+lMouse = second cursor

alt+shift+w = put &lt;p&gt; tag around selected
to put different tag - after alt+shift+w - write needed tag
to put needed tag on multiple lines 
select lines
ctrl+shift+l for multy line editing
alt+shift+w for p tag on all lines
write own tag - to overrite p tag on all edited lines

alt+shift+f = autoformat selected, so alt+a befor to select all
write html -> press tab = html sceleton to the file
alt+shift+1(2)(3) to manage sublime windows quantity

for autoformat shortcut
preferences -> keybindings -> add to user window - { "keys": ["shift+alt+f"], "command": "reindent"}
You can also add this command to userKeyBindings:

{"keys": ["your key bind.."], "command": "rename_tag"} // like super+shift+k
to install plugin - preferences ->packege control -> put plugin there
(C:\Users\user_name\AppData\Roaming\Sublime Text 3\Packages)

###############################################################################################
###############################################################################################


mdm elements reference - to look at all html elements description
<div>div</div> - container helping group content together, block element
<span>span</span> - container to, but inline element
<strong>strong</strong>(old<b></b>) - for strong letters
<em>emphasise</em>(old<i></i>) - for italic

###############################################################################################
###############################################################################################


lists
ordered list
<ol>
<li>item</li> list item
</ol>

unordered list
<ul>
<li>item</li> list item
</ul>

description list
<dl>
<dt>Mozila</dt> - groups of terms
<dt>Firefox</dt> - groups of terms
<dd> - descriptions
A free, open source, cross-platform,
graphical web browser.</dd>
</dl>

list-style-type: disc, circle, square, decimal, cjk-decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-alpha,
lower-latin, upper-alpha, upper-latin etc
Sets the type of bullets to use for the list, for example square or circle bullets for an unordered list, 
or numbers, letters or roman numerals for an ordered list.
list-style-position: inside, outside
Sets whether the bullets appear inside the list items, or outside them before the start of each item.
list-style-image: url(), none
Allows you to use a custom image for the bullet, rather than a simple square or circle.

###############################################################################################
###############################################################################################


by default in links used file protocol, to use local resources,
and to point link to outside add "http://" at the begining of href
<div class="inside" style="float:right">
	<a href="https://www.google.com/search?q=corgi&newwindow=1&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiSocynr-XaAhWBBSwKHR9_BvkQ_AUICigB&biw=1918&bih=989"
	title="corgi" target="_blank">
	<img src="http://i.imgur.com/Zl0A6erm.jpg" title="Rusty">
	</a>
</div>

tables
html5 -> <thead> and <tbody> doing nothing just pointing reader the head and the body of the table
<table border="1">
	<thead>
	<tr>
		<th>Name</th>
		th>Age</th>
	/tr>
	</thead>

	<tbody>
	<tr>
		<td>Rusty</td>
		<td>2</td>
	</tr>
	<tr>
		<td>Wyatt</td>
		<td>13</td>
	</tr>
	</tbody>
</table>

<colgroup>
    <col span="2" style="background-color:red">
    <col style="background-color:yellow">
  </colgroup>
Most browsers will display the <colgroup> element with the following default values:

colgroup { 
    display: table-column-group;
}

The <colgroup> tag specifies a group of one or more columns in a table for formatting.

The <colgroup> tag is useful for applying styles to entire columns, instead of repeating 
the styles for each cell, for each row.

Note: The <colgroup> tag must be a child of a <table> element, after any <caption> elements 
and before any <thead>, <tbody>, <tfoot>, and <tr> elements.

Tip: To define different properties to a column within a <colgroup>, use the <col> tag within 
the <colgroup> tag.
The <col> tag specifies column properties for each column one by one <col> within a <colgroup> element.

The <col> tag is useful for applying styles to entire columns, instead of repeating 
the styles for each cell, for each row.
<table>
  <colgroup>
    <col span="2" style="background-color:red">
    <col style="background-color:yellow">
  </colgroup>
  <tr>
    <th>ISBN</th>
    <th>Title</th>
    <th>Price</th>
  </tr>
  <tr>
    <td>3476896</td>
    <td>My first HTML</td>
    <td>$53</td>
  </tr>
</table>


<caption>Example Caption</caption>

You can give your table a caption by putting it inside a <caption> element and nesting that inside 
the <table> element. You should put it just below the opening <table> tag.

By supplying a caption element whose value clearly and concisely describes the table's purpose, it helps
 the people decide if they need to read the rest of the table content or skip over it.
This helps people navigating with the aid of assistive technology such as a screen reader, 
people experiencing low vision conditions, and people with cognitive concerns.

As your tables get a bit more complex in structure, it is useful to give them more structural 
definition. One clear way to do this is by using <thead>, <tfoot>, and <tbody>, which allow you 
to mark up a header, footer, and body section for the table.

###############################################################################################
###############################################################################################


<form></form> - shell container around inputs to submit them together
<form action="/my-form-submiting-page" method="post">
<!-- All input fields -->
</form>

action - specified where to send a data
method specifies type of http request(GET, POST)
GET - when we doing some like searching or retriving data(adds data in readable form to url request)
example - file:///C:/JS/jsboot/firstPage/forms.html?login=john1&email=john%40dot.com&password=123
after actual url "?" added - followed by input "name" + "=" + "value", inputs separated by "&"
POST - when we doing some request to database like sending data


<label></label>
to add input name on screen you can just type it before input tag
Login:<input type="text" name="login>

but better to wrap text name togheter with input in <label> tag to give programms idea that this actual text is
related to this actual input field
<label>Login:<input type="text" name="login></label>

or can be alternative syntax of using label
"for" attribute direct label tag to element by its name or id
<p><label>Login:<input type="text" name="login" placeholder="login" required></label></p>
or					
<p><label for="email">Email:</label><input type="email" name="email" placeholder="email" required></p>	
label will put his text before specified element but if you want text to be inside same <p> tag - put <label> inside <p>


-> mdn input
<input> default type="text"
<input type="password">
<input type="email">
<input type="date"> - date 
<input type="datetime"> - time by timezone
<input type="datetime-local"> - local time, time without timezone
<input type="file"> - selecting file
<input type="image"> - selecting image

<input type="radio"> - radio button, value attribute - to point app what to send if on, 
if name shared between radiobuttons - they connected and only one can be choosen
<p>
<label>Male:<input type="radio" id="male" name="sex" value="male"></label>
<label>Female:<input type="radio" id="female" name="sex" value="female"></label>
</p>

<input type="checkbox"> - checkbox button, default value unchecked, "required" attribute for mandatory check to submit

<input type="color"> - color picker
<input type="range"> - range picker, default min="0" max="100"
<input type="hidden"> - not displayed but submited to server

dropdown menu - name attribut in select to add value to sended data, value in option - to switch value from text in option to needed on demand

<select name="colorMenu">
	<option>Red</option>
	<option value="black">Black</option>
	<option value="white">White</option>
</select>
attributes
form - shows to which form related if placed not inside actual form
size - how much lines viewed together
multiple = multiple choise
selected - which element shown selected at start
name,required,disabled,autofocus


<textarea rows="10" cols="20"></textarea> - text area for multiline input needs

###############################################################################################
###############################################################################################


forms validation with html attributes

minlength
maxlength

required - forces input to be mandatory - defaul true

type="email" - forces form to validate that field has text part followed by @ followed by text part
text+@+text - without ?! etc symbols unacceptable in email addresses

pattern - matches input characters with regular expression
examples to give you a basic idea of how they work:

a — matches one character that is a (not b, not aa, etc.)
abc — matches a, followed by b, followed by c.
a* — matches the character a, zero or more times (+ matches a character one or more times).
[^a] — matches one character that is not a.
a|b — matches one character that is a or b.
[abc] — matches one character that is a, b, or c.
[^abc] — matches one character that is not a, b, or c.
[a-z] — matches any character in the range a–z, lower case only (you can use [A-Za-z] for lower and upper case, and [A-Z] for upper case only).
a.c — matches a, followed by any character, followed by c.
a{5} — matches a, 5 times.
a{5,7} — matches a, 5 to 7 times, but no less or more.
You can use numbers and other characters in these expressions too, such as:

[ -] — matches a space or a dash.
[0-9] — matches any digit in the range 0 to 9.
You can combine these in pretty much any way you want, specifying different parts one after the other:

[Ll].*k — A single character that is an upper or lowercase L, followed by zero or more characters of any type, followed by a single lowercase k.
[A-Z][A-Za-z' -]+ — A single upper case character followed by one or more characters that are an upper or lower case letter, a dash, an apostrophe, 
or a space. This could be used to validate the city/town names of English-speaking countries, which need to start with a capital letter, 
but don't contain any other characters. Examples from the UK include Manchester, Ashton-under-lyne, and Bishop's Stortford.
[0-9]{3}[ -][0-9]{3}[ -][0-9]{4} — A simple match for a US domestic phone number — three digits, followed by a space or a dash, 
followed by three digits, followed by a space or a dash, followed by four digits. You might have to make this more complex, 
as some people write their area code in parentheses, but it works for a simple demonstration.

<form>
  <input name="oneTwoNumbers" required pattern="[0-9]|[0-9][0-9]">
  <button>Submit</button>
</form>

###############################################################################################
###############################################################################################


CSS - Cascade Style Sheet
http://www.csszengarden.com/
https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048

background:
body{
background: url();
background-repeat: no-repeat;
background-size:cover;
}

###############################################################################################


text-decoration:
formal syntax = text-decoration-line || text-decoration-style || text-decoration-color

examples
.under {
  text-decoration: underline red;
}
.over {
  text-decoration: wavy overline lime;
}
.line {
  text-decoration: line-through;
}
.plain {
  text-decoration: none;
}
.underover {
  text-decoration: dashed underline overline;
}
.blink {
  text-decoration: blink;
}

text-shadow: 3px 3px 5px red,
	3px 7px 9px blue;

###############################################################################################


text-align: start | end | left | right | center | justify | match-parent

CSS property describes how inline content like text is aligned in its parent block element. 
text-align does not control the alignment of block elements, only their inline content.

###############################################################################################
###############################################################################################


Selectors
Descendant - one selector inside another

li a{
color:red;
}

Adjacent - one selector after another

h4 + ul{
border: 1px solid red;
}

Attribute - selector with attribute

a[href="http://www.google.com"]{
background: green;
}

*nth of type - every *nth selector of type

ul:nth-of-type(3){
color:green;
}

###############################################################################################
###############################################################################################


pseudoclasses - used to act when element is in scecific state
pseudoelements - used to work with certain area of element

pseudoclasses 
:active :any :any-link :checked :default :defined 
:dir() :disabled :empty :enabled
:first :first-child :first-of-type :fullscreen 
:focus :hover :indeterminate :in-range
:invalid :lang() :last-child :last-of-type :left 
:link :not() :nth-child() :nth-last-child()
:nth-last-of-type() :nth-of-type() :only-child 
:only-of-type :optional :out-of-range
:read-only :read-write :required :right :root 
:scope :target :valid :visited

:hover - changin element on mouse over it
h1:hover {
	color: blue;
}

:visited - changing visited anchors(links) <a> 
a:visited {
	color:gray;
}


pseudoelements

::after
::before
::cue
::first-letter
::first-line
::selection

The content CSS property is used with the ::before and ::after pseudo-elements to generate content in an element. 
Objects inserted using the content property are anonymous replaced elements.

add pluss after links
a::after {
  content: "+";
}

add plus before links
a::before {
  content: "+";
}

style first letter of element
p::first-letter {
  font-size: 130%;
}

style first line of element
p::first-line {
  color: red;
}

::selection CSS pseudo-element applies styles to the portion of a document that has been highlighted 
by the user (such as with the mouse).

::selection {
  background: cyan;
}

###############################################################################################
###############################################################################################


Fonts
https://fonts.google.com - fonts here
https://www.cssfontstack.com/ - a complete collection of web safe CSS font stacks
https://baconipsum.com - backon ipsum

add font
<link href="https://fonts.googleapis.com/css?family=Indie+Flower" rel="stylesheet">
font-family: 'Indie Flower', cursive; <- font after coma is alternative(if main font failed to load)

/* <length> values */
font-size: 12px; - real value

font-size: 0.8em; - relative value 
Another way of setting the font size is with em values. The size of an em value is dynamic. 
When defining the font-size property, an em is equal to the size of the font that applies 
to the parent of the element in question. If you haven't set the font size anywhere on the page, 
then it is the browser default, which is often 16px. So, by default 1em = 16px, and 2em = 32px. 
If you set a font-size of 20px on the body element, then 1em = 20px and 2em = 40px. 
Note that the value 2 is essentially a multiplier of the current em size.
Note2 - em - takes closest parent size as point, so if body 10px, p inside 1.6em will be 16px, 
span inside the p 1.6em - will be 25.6px

relative size values depends on parent elements size taken as 1, 100% or medium
/* <absolute-size> values */
font-size: xx-small;
font-size: x-small;
font-size: small;
font-size: medium;
font-size: large;
font-size: x-large;
font-size: xx-large;

/* <relative-size> values */
font-size: smaller;
font-size: larger;

/* <percentage> values */
font-size: 80%;

/* Global values */
font-size: inherit;
font-size: initial;
font-size: unset;

###############################################################################################


font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit
bold is equivalent to 700
normal is equivalent to  400
Many fonts only have 400 and 700 weights available. Available weights may vary font-to-font.

###############################################################################################


letter-spacing: 0.2rem;
line-height: normal | 2.5 | 3em | 150% | 32px

Prefer unitless numbers for line-height values
CSS property sets the amount of space used for lines, such as in text. On block-level elements, 
it specifies the minimum height of line boxes within the element. On non-replaced inline elements, 
it specifies the height that is used to calculate line box height.

###############################################################################################


font-style: normal | italic | oblique

###############################################################################################

font-variant - CSS property is a shorthand for the longhand properties font-variant-caps, font-variant-numeric, 
font-variant-alternates, font-variant-ligatures, and font-variant-east-asian

font-variant: normal | none | [ <common-lig-values> || <discretionary-lig-values> || 
<historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || 
historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) 
|| swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || 
annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps 
| unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || 
<numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || 
<east-asian-width-values> || ruby ]
where 
<common-lig-values> = [ common-ligatures | no-common-ligatures ]
<discretionary-lig-values> = [ discretionary-ligatures | no-discretionary-ligatures ]
<historical-lig-values> = [ historical-ligatures | no-historical-ligatures ]
<contextual-alt-values> = [ contextual | no-contextual ]
<feature-value-name> = <custom-ident>
<numeric-figure-values> = [ lining-nums | oldstyle-nums ]
<numeric-spacing-values> = [ proportional-nums | tabular-nums ]
<numeric-fraction-values> = [ diagonal-fractions | stacked-fractions ]
<east-asian-variant-values> = [ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]
<east-asian-width-values> = [ full-width | proportional-width ]

CSS property is a shorthand for the longhand properties font-variant-caps, font-variant-numeric, 
font-variant-alternates, font-variant-ligatures, and font-variant-east-asian

###############################################################################################
###############################################################################################


div -> float related problem - div doesnt inherit floated elements size

Depending upon the design being produced, each of the below clearfix CSS solutions has its own benefits.

The clearfix does have useful applications but it has also been used as a hack. Before you use a clearfix 
perhaps these modern css solutions can be useful:

css flexbox
css grid
Modern Clearfix Solutions
Container with overflow: auto;
The simplest way to clear floated elements is using the style overflow: auto on the containing element. 
This solution works in every modern browsers.

<div style="overflow: auto;">
  <img
    style="float: right;"
    src="path/to/floated-element.png"
    width="500"
    height="500"
  > 
  <p>Your content here…</p>
</div>
One downside, using certain combinations of margin and padding on the external element can cause scrollbars 
to appear but this can be solved by placing the margin and padding on another parent containing element.

Using ‘overflow: hidden’ is also a clearfix solution, but will not have scrollbars, however using hidden 
will crop any content positioned outside of the containing element.

Note: The floated element is an img tag in this example, but could be any html element.

Clearfix Reloaded
Thierry Koblentz on CSSMojo wrote: The very latest clearfix reloaded. He noted that by dropping support 
for oldIE, the solution can be simplified to one css statement. Additionally, using display: block (instead of 
display: table) allows margins to collapse properly when elements with clearfix are siblings.

.container::after {
  content: "";
  display: block;
  clear: both;
}
This is the most modern version of the clearfix.

Older Clearfix Solutions
The below solutions are not necessary for modern browsers, but may be useful for targeting older browsers.

Note that these solutions rely upon browser bugs and therefore should be used only if none of the above solutions 
work for you.

They are listed roughly in chronological order.

"Beat That ClearFix", a clearfix for modern browsers
Thierry Koblentz' of CSS Mojo has pointed out that when targeting modern browsers, we can now drop the zoom 
and ::before property/values and simply use:

.container::after {
    content: "";
    display: table;
    clear: both;
}
This solution does not support for IE 6/7 …on purpose!

Thierry also offers: "A word of caution: if you start a new project from scratch, go for it, but don’t 
swap this technique with the one you have now, because even though you do not support oldIE, your existing rules 
prevent collapsing margins."

Micro Clearfix
The most recent and globally adopted clearfix solution, the Micro Clearfix by Nicolas Gallagher.

Known support: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+

.container::before, .container::after {
  content: "";
  display: table;
}
.container::after {
  clear: both;
}
.container {
  zoom: 1;
}
Overflow Property
This basic method is preferred for the usual case, when positioned content will not show outside the bounds of the container.

http://www.quirksmode.org/css/clearing.html - explains how to resolve common issues related to this technique, namely, 
setting width: 100% on the container.

.container {
  overflow: hidden;
  display: inline-block;
  display: block;
}
Rather than using the display property to set "hasLayout" for IE, other properties can be used for triggering 
"hasLayout" for an element.

.container {
  overflow: hidden;
  zoom: 1;
  display: block;
}
Another way to clear floats using the overflow property is to use the underscore hack. IE will apply the values prefixed 
with the underscore, other browsers will not. The zoom property triggers hasLayout in IE:

.container {
  overflow: hidden;
  _overflow: visible; /* for IE */
  _zoom: 1; /* for IE */
}
While this works... it is not ideal to use hacks.

PIE: Easy Clearing Method
This older "Easy Clearing" method has the advantage of allowing positioned elements to hang outside the bounds of the 
container, at the expense of more tricky CSS.

This solution is quite old, but you can learn all about Easy Clearing on Position Is Everything: 
http://www.positioniseverything.net/easyclearing.html

Element using "clear" property
The quick and dirty solution (with some drawbacks) for when you’re quickly slapping something together:

<br style="clear: both" /> <!-- So dirty! -->
Drawbacks
It's not responsive and thus may not provide the desired effect if layout styles change based upon media queries. 
A solution in pure CSS is more ideal.
It adds html markup without necessarily adding any semantic value.
It requires a inline definition and solution for each instance rather than a class reference to a single solution 
of a “clearfix” in the css and class references to it in the html.
It makes code difficult to work with for others as they may have to write more hacks to work around it.
In the future when you need/want to use another clearfix solution, you won't have to go back and remove 
every <br style="clear: both" /> tag littered around the markup.

###############################################################################################
###############################################################################################


Bootstrap
Getting bootstrap
http://getbootstrap.com/getting-started/
http://v4-alpha.getbootstrap.com/getting-started/introduction/

Examples
http://getbootstrap.com/getting-started/#examples
http://getbootstrap.com/examples/theme/
https://getbootstrap.com/docs/3.3/examples/theme/

Best Web resources for Bootstrap
http://www.bootply.com/
http://www.layoutit.com/
https://www.boottheme.com/
https://bootswatch.com/
http://www.plugolabs.com/twitter-bootstrap-button-generator/
http://bootsnipp.com/buttons

Bootstrap Starter Template with CDN
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags always come first -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" 
integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- jQuery first, then Bootstrap JS. -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js" 
integrity="sha384-vZ2WRJMwsjRMW/8U7i6PWi6AlO1L79snBrmgiDpgIWJ82z8eA5lenwvxbMV1PAh7" crossorigin="anonymous"></script>
  </body>
</html>

###############################################################################################


https://www.w3schools.com/bootstrap/default.asp

container - Containers are the most basic layout element in Bootstrap and are required when using our default grid 
system. Choose from a responsive, fixed-width container (meaning its max-width changes at each breakpoint) or fluid-width 
(meaning it’s 100% wide all the time).

jumbotron - bootstrap container - indicates a big box for calling extra attention to some special content or information,
taking 100% of parent size, a lightweight, flexible component that can optionally 
extend the entire viewport to showcase key marketing messages on your site.

A jumbotron is displayed as a grey box with rounded corners. It also enlarges the font sizes of the text inside it.
Tip: Inside a jumbotron you can put nearly any valid HTML, including other Bootstrap elements/classes.

###############################################################################################


forms
form-group - .form-group class is the easiest way to add some structure to forms. It provides a flexible class 
that encourages proper grouping of labels, controls, optional help text, and form validation messaging.  

form-control - Textual form controls—like <input>s, <select>s, and <textarea>s—are styled with it. Included are styles 
for general appearance, focus state, sizing, and more.

<div class="form-group">
	<label for="exampleInputPassword1">Password</label>
	<input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
</div>

Inline forms
Use the .form-inline class to display a series of labels, form controls, and buttons on a single horizontal row. 
Form controls within inline forms vary slightly from their default states.

###############################################################################################


!!!to make hamburger button working - first add jQuery only than js script

navbar
Navbars require a wrapping .navbar with .navbar-expand{-sm|-md|-lg|-xl} for responsive collapsing and color scheme classes.
Navbars and their contents are fluid by default. Use optional containers to limit their horizontal width.
Use our spacing and flex utility classes for controlling spacing and alignment within navbars.
Navbars are responsive by default, but you can easily modify them to change that. Responsive behavior depends on our 
Collapse JavaScript plugin.
Navbars are hidden by default when printing. Force them to be printed by adding .d-print to the .navbar. See the display 
utility class.
Ensure accessibility by using a <nav> element or, if using a more generic element such as a <div>, add a role="navigation" 
to every navbar to explicitly identify it as a landmark region for users of assistive technologies.

Navbars come with built-in support for a handful of sub-components. Choose from the following as needed:

.navbar-brand - can be applied to most elements, but an anchor works best as some elements might require utility classes 
or custom styles. for your company, product, or project name.

.navbar-nav - Navbar navigation links build on our .nav options with their own modifier class and require the use of toggler 
classes for proper responsive styling. Navigation in navbars will also grow to occupy as much horizontal space as possible to 
keep your navbar contents securely aligned. Active states—with .active—to indicate the current page can be applied directly 
to .nav-links or their immediate parent .nav-items. for a full-height and lightweight navigation (including support for dropdowns).

.navbar-toggler - for use with our collapse plugin and other navigation toggling behaviors.

.form-inline - for any form controls and actions.

.navbar-text - for adding vertically centered strings of text.

.collapse.navbar-collapse - for grouping and hiding navbar contents by a parent breakpoint.


Color schemes
Theming the navbar has never been easier thanks to the combination of theming classes and background-color utilities. Choose from 
.navbar-light for use with light background colors, or .navbar-dark for dark background colors. Then, customize with .bg-* utilities.


it’s not required, you can wrap a navbar in a .container to center it on a page or add one within to only center the contents 
of a fixed or static top navbar.


Placement
Use our position utilities to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied 
to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use position: fixed, meaning they’re 
pulled from the normal flow of the DOM and may require custom CSS (e.g., padding-top on the <body>) to prevent overlap with other 
elements.
example - <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
Also note that when navbar fixed - it floats over the body, so to prevent body from sliding under navbar - add padding: 70px on 
the needed side
Also note that .sticky-top uses position: sticky, which isn’t fully supported in every browser.


Responsive behaviors
Navbars can utilize .navbar-toggler, .navbar-collapse, and .navbar-expand{-sm|-md|-lg|-xl} classes to change when their content
 collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.

For navbars that never collapse, add the .navbar-expand class on the navbar. For navbars that always collapse, don’t add any 
.navbar-expand class.

Toggler
Navbar togglers are left-aligned by default, but should they follow a sibling element like a .navbar-brand, they’ll automatically 
be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.
With no .navbar-brand shown in lowest breakpoint:

###############################################################################################


Grid

place grid in container - div .container or div .container-fluid, or withou container if you need no margins and edge-to-edge design
grid consists of div .row stuffed with divs - .col

<div class="container">
  <div class="row">
    <div class="col-sm">
      One of three columns
    </div>
    <div class="col-sm">
      One of three columns
    </div>
    <div class="col-sm">
      One of three columns
    </div>
  </div>
</div>

 - Containers provide a means to center and horizontally pad your site’s contents. Use .container for a responsive pixel width or .container-fluid 
for width: 100% across all viewport and device sizes.
 - Rows are wrappers for columns. Each column has horizontal padding (called a gutter) for controlling the space between them. This padding is then 
counteracted on the rows with negative margins. This way, all the content in your columns is visually aligned down the left side.
 - In a grid layout, content must be placed within columns and only columns may be immediate children of rows.
 - Thanks to flexbox, grid columns without a specified width will automatically layout as equal width columns. For example, four instances of .col-sm 
will each automatically be 25% wide from the small breakpoint and up. See the auto-layout columns section for more examples.
 -Column classes indicate the number of columns you’d like to use out of the possible 12 per row. So, if you want three equal-width columns across, 
you can use .col-4.
 - Column widths are set in percentages, so they’re always fluid and sized relative to their parent element.
 - Columns have horizontal padding to create the gutters between individual columns, however, you can remove the margin from rows and padding from 
columns with .no-gutters on the .row.
 - To make the grid responsive, there are five grid breakpoints, one for each responsive breakpoint: all breakpoints (extra small), small, medium, 
large, and extra large.
 - Grid breakpoints are based on minimum width media queries, meaning they apply to that one breakpoint and all those above it (e.g., .col-sm-4 applies 
to small, medium, large, and extra large devices, but not the first xs breakpoint).

Extra small <576px     None (auto)   .col-
Small >=576px	       540px         .col-sm-
Medium >=768px	       720px         .col-md-
Large >=992px	       960p          .col-lg-
Extra large >=1200px   1140px        .col-xl-			

there is no need to define each breakpoints col size, just defina sizes where change needed

to benefit from auto-layout columns sizing just not skip adding number to .col
or add only one column size like .col-6 and other .col's will be sized around this size

.w-100 - breakes equal-width columns into multiple lines
<div class="container">
  <div class="row">
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="w-100"></div>
    <div class="col">Column</div>
    <div class="col">Column</div>
  </div>
</div>

###############################################################################################


to manage margin between rows of the grid in bootstrap4
add class like
.top2{
   margin-top: 2%;
}
and use it on .col's, or on .row's if ur .col's grouped by .row's

###############################################################################################


icons -> bootstrap -> documentation -> extends -> icons -> font awesome -> all icons
to use font awesome - add
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.12/css/all.css" 
integrity="sha384-G0fIWCsCzJIMAVNQPfjH08cyYaUtMwjJwqiRKxxE/rx96Uroj1BtIQ6MLJuheaO9" crossorigin="anonymous">

choose icon, copy code, insert where symbol needed
<i class="fas fa-camera-retro"></i>
to manage color, size, shadows etc - just add id, and manage it through css like
#cam{
	color:green;
	font-size: 2rem;
}
<i class="fas fa-camera-retro" id="cam"></i>

###############################################################################################
###############################################################################################


JavaScript

<script src="scriptDemo.js"></script>

% - modulo - mod - remainder operation
10 % 3 = 1

strings concatination
"charlie" + "brown"

length property
"Cant stop".length

access individual characters using [] and index
"hello"[2] - l 

escape characters
"she said \"goodbye!\""

Ctrl+Shift+J - Open the Console panel -            
Ctrl+Shift+I or F12 - Open whatever panel you used last 
Ctrl+l - clear console
Ctrl+Mouse scroll - resize console
Shift+Enter - next line in console


type number - console return number
type operation - console return result
type clear() - clear console

% - modulo - mod - remainder operation
10 % 3 = 1

strings concatination
"charlie" + "brown"

length property
"Cant stop".length

access individual characters using [] and index
"hello"[2] - l 

escape characters
"she said \"goodbye!\""

expression - 1+1
statement, instruction - 1+1;
; means end of something

###############################################################################################


var - variable is a container that has a name on it and inside of this container - some data stored

5 Primitive Datatypes
Numbers
4
9.3
-10

Strings
"Hello World"
"43"

Boolean
false 
true

undefined

null
0 - if converted to number
"null" if converted to string

false, 0, "", null, undefined, NaN - always = false, everything else = true
in operation with && if left part = false - condition instantly =  false, without cheking right part
in condition with || if left part = true - condition instantly = true, without cheking right part

typeof - to check var or data type
typeof 10, typeof username, typeof "Cartman" etc

typeof NaN - returns "number" lol, so to check NaN we have
isNaN() method

we can divide by zero in javascript
5/0 = Infinite
isFinite() - to chech is number Finite or Infinite

###############################################################################################


alert() - displays as alert data or operation provided in parentheses
alert("Hello there")
alert(5+5)

console.log() - displays in console data or operation provided in parentheses
console.log("Hello in console")

prompt() - asks user input with message provided in parentheses
prompt("what is your name?")

input can be stored in var
var name cant begins with number

var userName = prompt("What is your name?") - users input will be stored to var
input is a string
if we need number for some boolean manipulations - convert input to number by Number(value)
value = "5"
Number(value) = 5
value * 1 = 5
+ value = 5

to convert number back to string
String(value) = "5"
value + "" = "5"

to convert to boolean
Boolean(5) = true
!!5 = true

string to number
parseInt("3432adsf");//3432
parseInt("FF", 16);//255 - parse hex number
number.toString(16);//number to hex number in string 
parseFloat("2134.34trrg");//2134.34

cut string
slice can work with negative - counting from the end
substring will swith numbers if first is bigger
var string = "Hello world".slice(6);//world
var string = "Hello world".substring(6);//world
var string = "Hello world".slice(3,6);//lo
var string = "Hello world".substring(3,6);//lo

find substring
var index="Hello world".indexOf("o");//4
var index="Hello world".indexOf("o",5);//7

var index="Hello world".lastIndexOf("o");//7
var index="Hello world".lastIndexOf("o",5);//4

replace substring
var string2=string1.replace("blue","red");

split string to array
var arr=string.split("");//split by elements
var arr=string.split(" ");//split by spaces
var arr=string.split(" ",2);//split by spaces but create array only from first 2 elements

examples
var string = "We know that monochrome is a type of grey";


var example="chrome";



var result;


var exampleIndex=string.indexOf(example);
if(exampleIndex != -1){

	var start = string.lastIndexOf(" ",exampleIndex)+1;

	var end = string.indexOf(" ",exampleIndex);

	if(end != -1){
		result=string.substring(start,end);

	}else{
		result=string.substring(start);
	}
}

result;//"monochrome"


function alphabet(startIndex,chars){
	var startIndex=97;
	var alphabet="";

	for(var i=0;i<chars;i++){
		alphabet+=String.fromCharCode(startIndex+i);
	}
	return alphabet;
}
or

function charToString(index){
	return String.fromCharCode(97+index);
}

function buildString(chars,callback){
	var result="";
	for(var i=0;i<chars;i++){
		result+=callback(i);
	}
	return result;
}
buildString(26,charToString);

###############################################################################################


var count=0;
var exp =10;
var number=2;
var result=1;
console.log("While_______________________________");
while(count<exp){
	result*=number;
	console.log(count+": " +result);
	count++;
}

console.log("For_______________________________");
result=1;
for(var i=0;i<exp;i++){
	result*=number;
	console.log(i+": "+result);
}

console.log("Do While_______________________________");
result=1;
count=20;
exp=19;
do{
	result*=number;
console.log(count+": "+result);
}while(count<exp);

var answer="stop";
var input="";
do{
	input=prompt("Say stop");
	console.log("Say stop: - "+input);
}while(input!=answer);

console.log("Switch_______________________________");
var x =2;
switch(2){
case 1: "One"; break;
case 2: "Two"; break;
case 3: "Three"; break;
default: "......";
}

###############################################################################################


ternary operator

var x=1, y;
y=(x==1)?"One":"Not One";

same as

if(x==1){
y="One";
}else{
y="Not One";
}

###############################################################################################


continue operator - skips cycles turn and goes straight on next turn
for(var i =0;i<30;i++){
	if(i % 3 != 0){
		continue; //skips cycles turn operations here if i not divisible by 3 without reminder
	}
	console.log(i);
}

break operator - breaks cycle completely and continues with operations after cycle

for(var i =0;i<30;i++){
	if(i % 3 != 0){
		continue; //skips cycles turn operations here if i not divisible by 3 without reminder
	}
	console.log(i);
	break; //breaks cycle completely and continues with operations after cycle
}

label: operator - after contine or break - skips turn or finishes completely not cycle in which continue 
or break situates - but cycle labeled with this label:
for label any world followed with colons can be used

label: while(){
	for(var i =0;i<30;i++){
		if(i % 3 != 0){
			continue; //skips cycles turn operations here if i not divisible by 3 without reminder
		}
		console.log(i);
		break label; //breaks labeled cycle completely and continues with operations after labeled cycle
	}
}

###############################################################################################
###############################################################################################


functions in js is a type of data
function x(){} - function declaration
function(){}; - instruction of function expression, anonymous function
var x = function(){}; - anonymous function assign
function declaration can be anywhere before, or after call, but
function expression can be only before call

x() - means execute x
x - container of function data type
typeof x -> "function"
typeof x() -> "undefined"

every function have return
if return isnt writed in function, there is still hidden return which returns -> undefined

function as data type can be assigned and returned
function outer(){
	function inner(x){
		console.log(x);
	}
return inner;
}
var x = outer();//result of outer execution(function inner) assigned to var x
x("Hello");//now is is used as function - execution called by parenthessies
//"Hello" in output


concealed function for immediately call

()();like this
(function(a,b){console.log(a,b);})();

###############################################################################################


closure(zamikanie) - inner function holds outside variable inside
"closure is a record storing a function[a] together with an environment"

function say(greet){
	return function(name){
		return greet+" "+name;
	}
}
var en = say("Hello");//here anonymous function holds "Hello" inside
var fr = say("Bonjour");//here anonymouse function holds " Bonjour" inside

console.log(en("Piter"));//Hello Piter
console.log(fr("Jean"));//Bonjour Jan

//chain function calling - console.log(say("Hello")("Piter"));
//go in console.log -> execute say("Hello") -> got anonymous function on 
its place -> execute it with("Piter")

###############################################################################################
###############################################################################################


object
objects variables - are properties, not usual variables like global or local

var user ={};//variable type object created
dot notation - to call objects property  
user.name = "John";//objects property added
user.age = 25;//objects property added
or 
var user={name:"John", age:25};

objects property's name can contain space, can be reserved word or number
all objects properties names are strings(so object is map?)
var user={"user name":"John", var:10, 2:true};

bracket notation - to call unusual propnames
user["user name"];
user["var"];
user[2]; or even usr[1+1];

objects functions
user.say:function(word){
	console.log(word + " from " + this.name);
}

call
user.say("Hello");

###############################################################################################


to check props presence in object
method in
"user name" in user;//true
 

to delete object property
method delete
delete user.name; or delete user["user name"];

to cycle objects properties
method for in - cycles through objects propnames
for(var i in user){
	console.log(i);//properties names
	console.log(user[i]);//properties values
}
or

Object.keys() - array of object properties names
Object.values() - array of objects properties values

Object.keys(user).forEach(function(element,index){

console.log(element);
//properties names
console.log("--------------------------------");

console.log(user[element]);
//properties values
});

//for loop example with arr.length called once for better performance
for (var i=0, n=arr.length; i < n; i++){}

###############################################################################################


binding objects context for use in inner function

var o = {
	param:10,
	method:function(){
		var self1 = this;//bind this context(this) to local var
		function test(){
			console.log(self1.param);	
		}
		test();
	}

};
o.method();

###############################################################################################


functions props

call
calls standalone function using object and its props
apply - same as call but can take array of arguments

function someFunction(){
	console.log(this.name);
}
someFunction.call(user);
or

function someFunction(a, b){
	console.log(this.name);
}
someFunction.call(user, a, b);
or

function someFunction(a, b){
	console.log(this.name);
}
someFunction.apply(user, [a, b]);

function print(){
	console.log.apply(console, arguments);
}

length - returns number of function arguments

arguments - contains actually given arguments, object as collection
argument.length - returns number of actually given arguments
argument[2] - returns 3rd of actually given arguments

var o = {
	
	param:10,
	
	method:function(a,b,c,d){
		
		var self1 = this;//bind this context(this) to local var
		
		function test(a,b){
			
			console.log(self1.param);
			
			console.log("length: "+test.length);	
			
			console.log("arguments: "+test.arguments);
			
			console.log("argumentsLength: "+test.arguments.length);
			
			console.log("argument[2]: "+test.arguments[2]);
		
			}
		
		test(a,b,c,d);
	
		}


};

o.method(1,2,3,4,5);

###############################################################################################
###############################################################################################


array - build-in object type

var arr = [];
var arr = [10,"john",true];

use push/pop, unshift/shift, slice/splice, join/concat

push/pop faster than unshift/shift
for faster x10-x100times in modern browsers
dont add props to array because intepretator starts treat it like an object
dont arr.neProp ="x";
dont add elements to array in wrong order because intepretator starts treat it like an object
dont arr[1]=2; arr[20]=5;


arr.push("Maria");//add element to the end of the array
arr.push("Maria","Broo");//add elements to the end of the array
arr.pop("Maria");//removes last element of the array and returns it

arr.unshift("Maria");//add element to the begining of the array
arr.unshift("Maria","Broo");//add elements to the begining of the array
arr.shift("Maria");//removes first element of the array and returns it
arr[5] = "Bill";//add element to the index


arr.length;//array length
arr.length = 3;//cut or extend arrya to 3 elements


for(var i=0;i<arr.length;i++){
	console.log(arr[i]);//output every member including undefined
}

for(var i in arr){
	console.log(arr.[i]);//output only defined members
}


array to string
var string = arr.toString();
var string = arr.join();
var string = arr.join("--");


array+array - creates new array
var arr3=arr1.concat(arr2);
var arr3=arr1.concat(number,arr2);
var arr3=arr1.concat(1,[3,4,5]);
var arr3=arr1.concat(arr2,arr4);

var arr3=arr1+arr2;//will concat arrays but unite last element of first with first member of second


slice array - creates new array 
var arr1 = [1, 5, 7, 12, 9];
var arr2 = arr1.slice(2);//[7, 12, 9] - elements after index 2
var arr2 = arr1.slice(1,3);//[5, 7 ] - elements between index 1 and 3 not including 3
var arr2 = arr1.slice(-3,-1);//[7,12] - slice from behind - last element index=-1, prelast =-2 etc
var arr2 = arr1.slice(2,1);//[]


splice array
var arr1 = [1, 5, 7, 12, 9];
var arr2 = arr1.splice(1,2);//[5, 7] - from index 1 - remove 2 elements and return them
arr1;//[1, 12, 9] - elements removed from old array
var arr2 = arr1.splice(1, 0, 2); - from index 1 - remove 0 elements and put 3 before index 1


reverse array
var array2=array1.reverse();


sort array
var arr2=arr1.sort();//sorts as strings
var arr2=arr1.sort(function(a,b){return a-b;});//own comparator sorts as numbers asc
var arr2=arr1.sort(function(a,b){return b-a;});//own comparator sorts as numbers desc

###############################################################################################


Math - Math is a built-in object that has properties and methods for mathematical constants 
and functions.

props - PI, E, LN2, LN10, LOG2E etc
methods - pow(),sqrt(),log(),exp()
	  ceil(), floor(), round(), max(), min(), random()
	  sin(), asin(), cos(), ascos(), tan(), atan()

trigonometric functions (sin(), cos(), tan(), asin(), acos(), atan(), atan2()) expect or return 
angles in radians. To convert radians to degrees, divide by (Math.PI / 180), and multiply by this 
to convert the other way.

var arr1 = [5,12];
var arr2 =[];
arr1[99]=7;

for(var i =0;i<arr1.length;i++){
	if(arr1[i]){
		arr2.push(Math.pow(arr1[i],2));
	}
}
or

for(var i in arr1){
	arr2.push(Math.pow(arr1[i],2));
}


Math.min(1,2,3,4,5,7,8,9);
or with array using apply() method

Math.min.apply(Math, [1,2,3,4,5,7,8,9]);


Number.MAX_VALUE
Number.MIN_VALUE

number precision
var number = 12123.4544534
number.toFixed(2)//12123.45

###############################################################################################


wrong(using closure)
function foo(){
	var arrr=[];
	for(var i=0;i<3;i++){
		a.puch(function(){console.log(i)});//function hold ref to i	
	}
return arr;
}

var result = foo();
result[0]();//3
result[1]();//3
result[2]();//3

write(using closure wrapped inside immediately called function)
function foo(){
	var arr=[];	
		for(var i=0;i<3;i++){
			(function(i){
				arr.push(function(){console.log(i)});//function hold ref to i	
			})(i);
		}
return arr;
}

var result = foo();
result[0]();//0
result[1]();//1
result[2]();//2

###############################################################################################


forEach - returns nothing
var numbers =[1,2,3];
nums.forEach(function(value){console.log(value*10);});

map - returns new array with new values
var numbers =[1,2,3];
nums.map(function(value){return value*10;});

###############################################################################################
###############################################################################################


regex - regular expressions

var regex =/../;
var string = "...";

regex.test(string);
string.search(regexp);

"test@yahoo.com".search(/@/);//5
"test@yahoo.com".search(/gmail|aol|hotmail/);//-1

/@/.test("test@yahoo.com");//true
/gmail|aol|hotmail/.search("test@yahoo.com");//false

^ - string must start from regex, no other chars before
$ - string must ends with regex, no other chars after
i - after regex = ignore case
m - after regex = multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning 
	or end of each line (delimited by \n or \r), not only the very beginning or end of the whole input string)
g - after regex = global match; find all matches rather than stopping after the first match
[] - for group of possible characters, without[] - regex must follow citation

###############################################################################################


/[abcde]/.test("test@yahoo.com");//is there any of abcde?
/[abcde]/.test("test@yahoo.com");//is there no of abcde?
/[a-z]/.test("test@yahoo.com");
/[a-zA-Z]/.test("test@yahoo.com");
/[0-9]/.test("test@yahoo.com");
/[\w]/.test("test@yahoo.com");///[a-zA-Z0-9_]/
/[\W]/.test("test@yahoo.com");///no[a-zA-Z0-9_]/
/[\d]/.test("test@yahoo.com");///[0-9]/
/[\D]/.test("test@yahoo.com");///no[0-9]/

/./.test("test@yahoo.com");//any char
/\./.test("test@yahoo.com");//dot
/ab{2}c/.test("abbcd");// regex for a followed 2b followed c
/ab{2,4}c/.test("abbbcd");// regex for a followed 2-4b followed c
/ab?c/.test("abcd");// regex for a followed or not with b followed c
same/ab{0,1}c/.test("abcd");// regex for a followed or not with b followed c
/ab+c/.test("abcd");// regex for a followed with any count of b followed c
same/ab{1,}c/.test("abcd");// regex for a followed with any count of b followed c
/ab*c/.test("abcd");// regex for a followed or not with any count of b followed c
same/ab{0,}c/.test("abcd");// regex for a followed or not with any count of b followed c

(x) - group elements and create reference to them - eats performance

(?:x) - group elements with out ref, atches x but does not remember the match. These are called non-capturing groups. The matched substring 
cannot be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's 
properties $1, ..., $9.

###############################################################################################


/\d\d?-\d\d?-\d{4}/
same /\d{1,2}-\d{1,2}-\d{4}/

25-02-2013
/^(?:[0-2][1-9]|^[12][0-9]|^3[01])-(?:0[1-9]|1[0-2])-(?:2\d{3})$/.test("25-02-2013");
25-2-2013
25-02-2013
5-02-1999

"dfgdsgfdg"
/^(["'][^"']*\1$)/ - 
["'] - " or ' 
[^"'] - not " or ' 
* - anything 
\1 - when we grouped first["'] with round brackets like (["']) - it tell test() - create reference to this place
to founded char " or ', refs called by order of appearance, so this ref = 1, and with \1 - we calling this 
ref - to make test compare char on \1 with char founded where ref goes, so if we had " at the begining - 
it will find " and compare char at \1 with it in our case we trying to find same quotes at start and at the end

example - change positions of grouped element in the string
"25-02-2013" to "02-2013-25"
var reg = /^([0-2][1-9]|^[12][0-9]|^3[01])-(0[1-9]|1[0-2])-(2\d{3})$/;
var string ="25-02-2013";
var result = string.replace(reg,"$2-$3-$1");
result;//"02-2013-25"

###############################################################################################


regex - examples http://regexlib.com/

String.match()

match() - creates array with match and props - index of match, input - original string
if regex with ()refs - creates array from string with original stringand reffed strings
if regex with g - creates array from all matches
if regex not matched - returned not empty array, but null - another type

var arr ="test@yahoo.com".match(/t/);

arr;// 
["t", index: 0, input: "test@yahoo.com"]

var arr ="test@yahoo.com".match(/([a-z]+)@([a-z]+).([a-z]+)/);


arr
;// ["test@yahoo.com", "test", "yahoo", "com"]

var arr ="test@yahoo.com".match(/t/g);


arr;// ["t", "t"]























###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
